<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Codes on Background Process </title>
      <generator uri="https://gohugo.io">Hugo</generator>
    <link>http://backgroundprocess.com/code/index.xml</link>
    <language>en-us</language>
    <author>Tim Kuhlman</author>
    
    <updated>Mon, 17 Jul 2017 00:00:00 UTC</updated>
    
    <item>
      <title>Done Criteria</title>
      <link>http://backgroundprocess.com/code/done/</link>
      <pubDate>Mon, 17 Jul 2017 00:00:00 UTC</pubDate>
      <author>Tim Kuhlman</author>
      <guid>http://backgroundprocess.com/code/done/</guid>
      <description>&lt;p&gt;A checklist list of done criteria is helpful to avoid skipping any steps in code creation, this is the list I use for my projects.
Where possible automated tools should be used to help verify good practices are followed.
These tools are typically language specific so I skipped adding any here.
&lt;/p&gt;

&lt;h2 id=&#34;ready-for-review&#34;&gt;Ready for Review&lt;/h2&gt;

&lt;ul class=&#34;task-list&#34;&gt;
&lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled class=&#34;task-list-item&#34;&gt; Committed with a good commit message to appropriate branches as determined by the teams source control practices.&lt;/li&gt;
&lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled class=&#34;task-list-item&#34;&gt;  The code works and shows that by being well covered with automated tests, some combination of unit and/or integration tests as appropriate.&lt;/li&gt;
&lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled class=&#34;task-list-item&#34;&gt; Quality, including:

&lt;ul class=&#34;task-list&#34;&gt;
&lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled class=&#34;task-list-item&#34;&gt; The code has good style and has been lint checked.&lt;/li&gt;
&lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled class=&#34;task-list-item&#34;&gt; Simplicity, the code is easy to read and maintain, avoids complexitiy and is focused on solving a single problem.&lt;/li&gt;
&lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled class=&#34;task-list-item&#34;&gt; All errors are handled.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled class=&#34;task-list-item&#34;&gt; Documented - design and implementations documented in or close to the code as needed.&lt;/li&gt;
&lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled class=&#34;task-list-item&#34;&gt; Metrics exposed, healthcheck exposed.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;ready-for-deployment&#34;&gt;Ready for Deployment&lt;/h2&gt;

&lt;ul class=&#34;task-list&#34;&gt;
&lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled class=&#34;task-list-item&#34;&gt; Reviewed and merged.&lt;/li&gt;
&lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled class=&#34;task-list-item&#34;&gt; Tested in a staging environment.&lt;/li&gt;
&lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled class=&#34;task-list-item&#34;&gt; Demoed and approved by product owner.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;done&#34;&gt;Done&lt;/h2&gt;

&lt;ul class=&#34;task-list&#34;&gt;
&lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled class=&#34;task-list-item&#34;&gt; Dashboards for metrics created.&lt;/li&gt;
&lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled class=&#34;task-list-item&#34;&gt; Alerts in place.&lt;/li&gt;
&lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled class=&#34;task-list-item&#34;&gt; Runbook for alerts created&lt;/li&gt;
&lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled class=&#34;task-list-item&#34;&gt; Documented - All relevant user and administration documentation is in place.&lt;/li&gt;
&lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled class=&#34;task-list-item&#34;&gt; Live&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>A Golang implementation of PasswordSafe V3, ready for Beta</title>
      <link>http://backgroundprocess.com/code/gopwsafe-beta/</link>
      <pubDate>Fri, 27 May 2016 21:43:39 MDT</pubDate>
      <author>Tim Kuhlman</author>
      <guid>http://backgroundprocess.com/code/gopwsafe-beta/</guid>
      <description>&lt;p&gt;The password database I have been implementing in go is ready for Beta! The DB is implemented using the &lt;a href=&#34;http://pwsafe.org/&#34;&gt;password safe&lt;/a&gt; version 3
database spec. Enough of the features for this are now working that
&lt;a href=&#34;https://github.com/tkuhlman/gopwsafe/releases/tag/0.3.0&#34;&gt;0.3.0 release&lt;/a&gt; is ready for others to test. &lt;/p&gt;

&lt;p&gt;I have been using this code for months and would encourage anyone else needing a password DB to check it out now. I have particularly enjoyed the ability
to search across multiple open password dbs at one time. This was the primary itch I was scratching in taking up this project. Though that feature has been
implemented for months the gui it has been missing some basics such as a reminder to save after changes, the ability to change a DB password and to make a
new DB. These features are now all working.&lt;/p&gt;

&lt;p&gt;It is still a beta release because there are many missing features and some known bugs. The primary bug right now is that closing an open DB doesn&amp;rsquo;t work
without closing the entire program. The &lt;a href=&#34;https://github.com/tkuhlman/gopwsafe&#34;&gt;project readme&lt;/a&gt; has a good running list of missing features in the Roadmap
section. Primarily these are features that take advantage of have multiple DBs open at once, such as the ability to move records from one DB to another.
Lastly the gtk gui could use countless tweaks to clean it up.&lt;/p&gt;

&lt;p&gt;If you test it out have any feedback or find any bugs use the &lt;a href=&#34;https://github.com/tkuhlman/gopwsafe/issues&#34;&gt;project issues&lt;/a&gt; section to notify me.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Mojo Integration Tests with LXD</title>
      <link>http://backgroundprocess.com/code/mojo-integration-tests/</link>
      <pubDate>Fri, 12 Feb 2016 13:36:07 MST</pubDate>
      <author>Tim Kuhlman</author>
      <guid>http://backgroundprocess.com/code/mojo-integration-tests/</guid>
      <description>&lt;p&gt;I have recently finished building an LXD image for doing integration tests of &lt;a href=&#34;https://mojo.canonical.com&#34;&gt;Mojo&lt;/a&gt;.
I did this because I wanted to be able to reliably test the changes to Mojo that I was making. A repeatable,
standard environment that can run set of integration tests fits the bill.
&lt;/p&gt;

&lt;h2 id=&#34;using-a-container&#34;&gt;Using a Container&lt;/h2&gt;

&lt;p&gt;There are a few key advantages I see to doing the integration tests in a container image like this:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Having a repeatable environment enables automation, sharing of the environment among developers, using
the environment as a base standard and incremental improvement.&lt;/li&gt;
&lt;li&gt;The image can be built to a standard, in this case it runs Ubuntu LTS with the latest distributed versions
of Juju/Mojo and other tooling.&lt;/li&gt;
&lt;li&gt;Isolation from the primary dev environment allows for easy cleanup, easier testing of various branches and tests
more easily run in parallel.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;integration-tests&#34;&gt;Integration Tests&lt;/h2&gt;

&lt;p&gt;Integration tests themselves I want running because some tests are just not practical to do via
unit tests. This is especially true for code that interacts with a lot of other programs such as Mojo.&lt;/p&gt;

&lt;p&gt;In many cases integration tests bring an real world element unit tests don&amp;rsquo;t. For example the Mojo unit tests
cover Juju interactions decently well using the expected Juju status output. However what if that
expected output changes? For example Juju output could change in a way that is harmless and not
noticed so everyone upgrades Juju, then later Mojo changes but the unit tests are all based on the
older output, integration tests will catch this before sending broken code to production.&lt;/p&gt;

&lt;p&gt;On the other hand some tests, ie proper parsing of a manifest file, work better as a unit test. In other
situations it perhaps isn&amp;rsquo;t so clear. Have integration tests as a tool in addition to unit tests gives Mojo
developers another way to validate code before merging.&lt;/p&gt;

&lt;h2 id=&#34;more-information&#34;&gt;More Information&lt;/h2&gt;

&lt;p&gt;The image can also be used for development of Mojo specs, there is some information on that and more information on using the image in the
image &lt;a href=&#34;http://bazaar.launchpad.net/~mojo-maintainers/mojo/trunk/view/head:/contrib/LXD/README.md&#34;&gt;readme&lt;/a&gt;.
I also made this &lt;a href=&#34;https://youtu.be/Q8ll7OsTtMk&#34;&gt;screen cast&lt;/a&gt; to introduce how I use the image today. I often watch
these screen casts at double speed and recommend you do for this one also.&lt;/p&gt;

&lt;p&gt;Now that the base image is done all the Mojo developers can all incrementally add more tests and I look forward to seeing it expand.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Weechat Command Queues</title>
      <link>http://backgroundprocess.com/code/weechat-queue/</link>
      <pubDate>Mon, 01 Feb 2016 21:39:58 MST</pubDate>
      <author>Tim Kuhlman</author>
      <guid>http://backgroundprocess.com/code/weechat-queue/</guid>
      <description>&lt;p&gt;I use &lt;a href=&#34;http://weechat.org&#34;&gt;weechat&lt;/a&gt; for much of the day and have issue regular repetitive commands periodically.
If you are in the same situation you may find the &lt;a href=&#34;https://weechat.org/scripts/source/queue.py.html/&#34;&gt;queue plugin&lt;/a&gt; I recently modified to be useful.
&lt;/p&gt;

&lt;p&gt;The queue plugin simply allows you to build up a list of commands then run them all at once. My
&lt;a href=&#34;https://github.com/weechat/scripts/pull/137/files&#34;&gt;modification&lt;/a&gt; was to allow saving these across restarts of weechat.
That way I can build up a few queues I use regularily and just call them whenever needed.&lt;/p&gt;

&lt;p&gt;For example when I start my day I just execute &lt;code&gt;/qu exec morning&lt;/code&gt; to switch my away status, announce my availability in a couple of rooms, etc.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Development Best Practices for Systems Administrators</title>
      <link>http://backgroundprocess.com/code/sysadmins/</link>
      <pubDate>Sat, 16 Jan 2016 20:44:55 MST</pubDate>
      <author>Tim Kuhlman</author>
      <guid>http://backgroundprocess.com/code/sysadmins/</guid>
      <description>&lt;p&gt;The days where systems administrators do no development are gone. Just as developers
leverage cloud infrastructure and tooling to deploy services, sysadmins develop code to automate
their infrastructure and to fill the feature gaps that they are uniquely positioned to see.

Though best development practices are the same for both sysadmins and devs, some are more
natural to one group or another. The heart of devops is operators and developers coming together and in many ways this
post is really about what sysadmins can learn from developers. Here are some best practices I think come less naturally to operators.&lt;/p&gt;

&lt;h2 id=&#34;best-practices&#34;&gt;Best Practices&lt;/h2&gt;

&lt;h3 id=&#34;simplify&#34;&gt;Simplify&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Interface&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Make your project simple to use. Sysadmins are badasses at the CLI and forget not everyone is. Also make sure to keep the interface consistent.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Standardize&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Choose sane defaults, don&amp;rsquo;t be afraid to limit choice and flexibility so the code steers people toward good and/or standard practices.
Choice can be good at times but more often than not is a bit stifling. One difference between a usable project and a great one is often in appropriate
defaults and simplicity of configuration.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Code Structure&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Turns out the basics of code are easy, children can grasp the concepts of branches and loops. Most code is dealing with the complexity
of having so many branches and loops. That is why the common code constructs (classes, inheritance, types/interfaces) exist.
Layers of abstraction, separation of concern and encapsulation are amount the keys to good complexity management. The difference between
good design and bad is how well the complexity management is done.&lt;/p&gt;

&lt;p&gt;There are many code techniques to deal with complexity and this is a great example of where sysadmins can learn a lot from devs. I&amp;rsquo;ll not delve
into actual techniques but rather here are some principles to keep in mind while coding:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://sysadvent.blogspot.com/2015/12/day-22-simplicity-in-complex-systems.html&#34;&gt;Reducing code complexity&lt;/a&gt; by thinking about where the code can shrink
or hide the complexity. Shrink complexity by building code constructs that break the complexity up. Hide it by building complexity into
methods or objects, hiding it from the rest of the system.&lt;/li&gt;
&lt;li&gt;Keep your code organized. One principle to avoid sprawling code is, &lt;a href=&#34;http://martinfowler.com/bliki/Yagni.html&#34;&gt;YAGNI&lt;/a&gt;, only write to what you
actually need now. Sysadmins run systems and so have great insight into what is needed making this best practice relatively easy. However there
is one caution with YAGNI. To quote Martin Fowler &amp;ldquo;Yagni only applies to capabilities built into the software to support a presumptive feature, it does
not apply to effort to make the software easier to modify.&amp;rdquo; In short YAGNI is not an excuse for unorganized code. Organize your code and revisit the
organization to keep it organized as it grows and more features are added.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;document&#34;&gt;Document&lt;/h3&gt;

&lt;p&gt;Document your code! Maybe this is one both devs and sysadmins could do better at.&lt;/p&gt;

&lt;p&gt;Document as you are writing the code. After having just written the code you know what it does and there is no better time to clearly express that.
The code&amp;rsquo;s lifecycle is just beginning, the project will be used and modified by yourself and others and good documentation helps immensely with
these further steps.&lt;/p&gt;

&lt;p&gt;The closer to the code the documentation is the better. It is most likely to stay up date if the documentation is close to the code as well as being the
easiest to find. Also being close to the code gives you an automatic context allowing the documentation to be more succinct.
Most languages have built-in tools for documenting well and publishing the docs in a standard way, use these tools.&lt;/p&gt;

&lt;p&gt;In addition to helping with the further lifecycle of your project the act of documenting is a tool for discovering unnecessarily complexity.
When documenting you have to force yourself to think like someone unfamiliar with the project which is an important mindset to adopt periodically.
This is especially true when writing the overview section of your docs which links project components together into a whole that users will interact with.
I often find documenting reveals big wins where just a bit more code results in a large improvements.&lt;/p&gt;

&lt;h3 id=&#34;test&#34;&gt;Test&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Automated Testing&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I find sysadmins often test manually really well but don&amp;rsquo;t automate the testing as well. The manual testing is great that first
time but the automated testing provides repeatability. The repeatability is key for proving functionality and for any future changes, which
for most projects are bound to happen.&lt;/p&gt;

&lt;p&gt;Automated testing does have its limits, in particular unit testing is limited in how useful it can be for code that interacts with other
systems. This is the type of code sysadmins write most often. It is difficult and fragile to mock out code that does network I/O, a system call, db I/O and
more network I/O. This doesn&amp;rsquo;t mean skip automated tests but rather ensure the use cases are covered with
automated integration tests. A great use of containers is to create pre-built test environments for automate integration testing.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Real World Usage&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Use and run your own code in a real environment. It is through running code in a real environment that you discover the true
problems that need fixing. Indeed the motivation for much of the code sysadmins write comes from running real environments. Even though this seems
obvious to sysadmins it is a key best practices that is so important it needs to be mentioned.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Launchpad Merge Proposal Helper Script</title>
      <link>http://backgroundprocess.com/code/mp/</link>
      <pubDate>Fri, 01 Jan 2016 12:20:22 MST</pubDate>
      <author>Tim Kuhlman</author>
      <guid>http://backgroundprocess.com/code/mp/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve written a script to aid in merge proposals done with &lt;a href=&#34;https://launchpad.net/&#34;&gt;Launchpad&lt;/a&gt;.
Simply run the command with the url of the merge proposal as the argument and the script will
 spawn a shell with the working directory being the code with the uncommitted
merge. You can then diff the code, run tests or whatever else as needed.&lt;/p&gt;

&lt;p&gt;When you exit the shell you will be prompted to merge, if you choose to do so a commit message will be
populated for you and opened in an editor so you can edit as you choose. This is also your 2nd
opportunity to bail if you need to. Assuming all is good save and the merge will be done.&lt;/p&gt;

&lt;p&gt;The script leverages your installed credentials for bzr and will use
&lt;a href=&#34;https://help.launchpad.net/API/launchpadlib&#34;&gt;launchpadlib&lt;/a&gt; to authenticate
against the api on your first usage.&lt;/p&gt;

&lt;p&gt;The script is at &lt;a href=&#34;https://github.com/tkuhlman/scripts/blob/master/bin/mp&#34;&gt;https://github.com/tkuhlman/scripts/blob/master/bin/mp&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you use &lt;a href=&#34;https://launchpad.net/&#34;&gt;Launchpad&lt;/a&gt; give it a try and let me know if it works or you have
any ideas to improve it.&lt;/p&gt;

&lt;p&gt;I should note it is bzr specific at this point as the reviews I do are primarily on bzr but it could be
extended with git support as needed.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Ansible Modules</title>
      <link>http://backgroundprocess.com/code/ansible-modules/</link>
      <pubDate>Tue, 06 Jan 2015 21:43:31 -0600</pubDate>
      <author>Tim Kuhlman</author>
      <guid>http://backgroundprocess.com/code/ansible-modules/</guid>
      <description>&lt;p&gt;Ansible is relatively simple in relation to other configuration management frameworks. This makes it easier to approach and accomplish real work with, especially
for those who don&amp;rsquo;t work in it full time, however there are times when more functionality is needed. Ansible&amp;rsquo;s answer for most of these situations is to
write a module.&lt;/p&gt;

&lt;p&gt;I have written a couple of &lt;a href=&#34;https://github.com/hpcloud-mon/ansible-module-monasca&#34;&gt;modules for Monasca&lt;/a&gt; and doing so was easy, particularly if you know Python.
&lt;/p&gt;

&lt;h2 id=&#34;common-python-functions&#34;&gt;Common Python Functions&lt;/h2&gt;

&lt;p&gt;Though you can write modules in any language there are various functions available for Python that simplify the process.&lt;/p&gt;

&lt;p&gt;The documentation for &lt;a href=&#34;http://docs.ansible.com/developing_modules.html&#34;&gt;writing Ansible modules&lt;/a&gt; is a bit light on some details particularly on using the
Python common functions. The docs mostly encourage you to check out code examples, my initial reaction to this was dread that things were going to get difficult.
Happily I found most of the examples were straight forward and so it was simple enough for someone already familiar with Python.&lt;/p&gt;

&lt;p&gt;The common functions make the writing of the modules in Python a simple coding task. Looking back at the modules I have written more lines are dedicated to the documentation
of the module than to the code itself. Among the code a large chunk is dealing with defining the various optional values that can be passed in. I point
this out only to highlight that the common libraries make the code and the logic itself quite simple and even naturally steer toward documentation
driven development.&lt;/p&gt;

&lt;h2 id=&#34;modules-for-idempotency&#34;&gt;Modules for Idempotency&lt;/h2&gt;

&lt;p&gt;As I have &lt;a href=&#34;infrastructure/2014/11/02/ansible-config-management-simplified.html&#34;&gt;written previously&lt;/a&gt; loops and conditionals are cumbersome in Ansible. In my
usage I particularly felt this at times I tried to accomplish a task lacking a module and retain idempotency. Looping through a list to check the status and
then conditionally performing operations based on the result is possible in raw Ansible but is more straight forward, flexible and cleaner to implement in a
module.&lt;/p&gt;

&lt;p&gt;In Ansible a module is the fundamental mechanism used to accomplish idempotent operations. The ease of implementing idempotency in a module
verses in Ansible directly has more than anything else motivated me to add to my todo list a few modules I would like to write.&lt;/p&gt;

&lt;h2 id=&#34;shared-code-among-modules&#34;&gt;Shared code among modules&lt;/h2&gt;

&lt;p&gt;The one major complaint I have with the modules I have written is that it is difficult to have code shared between modules. Importing python libraries is straight forward
as well as including code from the Ansible base but code shared between Ansible modules is not possible.&lt;/p&gt;

&lt;p&gt;The reason it doesn&amp;rsquo;t work is because Ansible does not execute the module locally but rather copies it to
a remote host. Additionally Ansible is trying to do this with as few operations as possible to keep it performant. Ansible would have to either parse the module
or copy the entire library directory on each run for a shared file to be available.&lt;/p&gt;

&lt;p&gt;Though I understand the reasons behind this
behaviour since Ansible handles including libraries from the Ansible core and any included python libraries in the system path are available I found myself expecting
to be able to define my own shared python files. After spending a bit of time looking for a way to have a shared python file shipped with my Ansible modules, I
choose to just copy the shared code to both Ansible modules. That is far from ideal but the amount of shared code was relatively small so the alternative of packing
it into a library to be installed on the remote machine would be more trouble.&lt;/p&gt;

&lt;p&gt;Ultimately I have no solution for this so will live with it as a minor annoyance for now.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
